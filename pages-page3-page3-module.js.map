{"version":3,"sources":["./src/app/pages/page3/page3.module.ts","./src/app/pages/page3/page3-routing.module.ts","./src/app/pages/page3/page3.component.ts","./src/app/pages/page3/page3.component.html"],"names":[],"mappings":"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","file":"pages-page3-page3-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { Page3RoutingModule } from './page3-routing.module';\nimport { Page3Component } from './page3.component';\n\n\n@NgModule({\n  declarations: [Page3Component],\n  imports: [\n    CommonModule,\n    Page3RoutingModule\n  ]\n})\nexport class Page3Module { }\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { Page3Component } from './page3.component';\n\nconst routes: Routes = [{ path: '', component: Page3Component }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class Page3RoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-page3',\n  templateUrl: './page3.component.html',\n  styleUrls: ['./page3.component.css']\n})\nexport class Page3Component implements OnInit {\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n  }\n  OnBack(){\n    this.router.navigate(['page2']);\n  }\n  OnNext(){\n    this.router.navigate(['page4']);  \n  }\n  OnInicio(){\n    this.router.navigate(['frizo']);\n  }\n}","<div class=\"container\">\n    <div class=\"container\">\n        <div class=\"header\" (click)=\"OnInicio()\">\n            <h2>Aministrador de Memoria</h2>\n        </div>\n    </div>\n    <div class=\"body\">\n        <div class=\"row\">\n            <div class=\"col-md-1 atras\">\n                <button class=\"bi bi-caret-left btn btn-info btn btn-block btatras\" (click)=\"OnBack()\"></button>\n            </div>\n            <div class=\"col-md-10\">\n                <div class=\"row\">\n                    <p style=\"text-align: justify;\">\n                        Los programas deben ser llevados a la memoria y convertirse en procesos para ser ejecutados. Cola de entrada – colección de programas en disco que esperan para ser llevados a la memoria para ejecución.\n                        La memoria principal es un depósito de datos a los que se puede acceder rápidamente y que son compartidos por la cpu y los dispositivos de E/S.\n                    </p>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-md-7\">\n                        <p>Cuando un programa se carga en memoria principal se convierte en procesos.\n                            <br>\n                            Las técnicas que existen para la carga de programas en la memoria son: partición fija, que es la división de la memoria libre en varias partes (de igual o distinto tamaño) y la partición dinámica, que son las particiones de la memoria en tamaños que pueden ser variables, según la cantidad de memoria que necesita cada proceso.\n                        </p>\n                        <p>\n                            Entre las principales operaciones que desarrolla la administración de memoria se encuentran:\n                            <br>\n                            <i class=\"bi bi-box-arrow-up-right\"> Reubicacion: que consiste en trasladar procesos activos dentro y fuera de la memoria principal para maximizar la utilización del procesador</i><br>\n                            <i class=\"bi bi-shield-check\"> Proteccion: mecanismos que protegen los procesos que se ejecutan de interferencias de otros procesos</i><br>\n                            <i class=\"bi bi-share\"> Uso compartido de codigos y datos:  con lo que el mecanismo de protección permite que ciertos procesos de un mismo programa que comparten una tarea tengan memoria en común</i><br>\n                            \n                        </p>\n                    </div>\n                    <div class=\"col-md-2\">\n                        <img src=\"https://www.ecured.cu/images/thumb/1/13/Admt_memoria.jpg/260px-Admt_memoria.jpg\" style=\"height: 300px;\">\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-md-12\">\n                        <h4>Asignación contigua</h4>\n                        <p>\n                            Generalmente la memoria principal tiene dos particiones.-Para el sistema operativo residente que puede ser colocado en memoria baja o alta de acuerdo a la ubicación del vector de interrupciones-Los procesos de los usuarios se colocan en otra partición\n                            <br>\n                        </p>\n                           <h6> Asignación de partición única:</h6> \n                           <p>\n                        - Se usa el esquema de registro de reubicación para proteger a los procesos de los usuarios entre si, y para proteger el código y los datos del SO. - El registro de ubicación tiene el valor de la dirección física mas pequeña; \n                            <br>\n                        </p>\n                        <h6>Asignación con múltiples particiones</h6>\n                        <p>-Hueco: Bloque de memoria disponible; se establecen varios huecos (particiones) de diferentes tamaños a través de la memoria. -Cuando un proceso llega, es asignado a un hueco lo suficientemente grande para contenerlo -El SO mantiene información acerca de las particiones asignadas.</p>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-md-12\">\n                        <h4>Asignación con múltiples particiones fijas</h4>\n                        <p style=\"text-align: justify;\">\n                            Particiones configuradas por usuario, predeterminadas, se uso en OS/360/MFT (multiprogramación con un # fijo de tareas). Recolocación: El enlazador debe determinar que direcciones recolocarse vs Carga absoluta x part.\n                            <br>\n                        Protección: Bloques de 2K con clave, o Registro de base y límite. FRAGMENTACIÓN. no se puede aplicar overlays en este esquema de administración de memoria Sistemas de protección:-registro limite y base -protección por clave fragmentación interna: desperdicio de espacios de memoria.\n                        </p>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-md-12\">\n                        <h4>Asignación con particiones variables</h4>\n                        <p style=\"text-align: justify;\">\n                            El tamaño de la partición se establece en el momento de cargar el programa y dependiendo su tamaño.\n                            <br>\n                            Los procesos tienen que correr en memoria contigua. Tiene un problema de fragmentación externa, por los huecos que quedan después de ejecución; La solución es mover el proceso, que se están ejecutando, proceso de compresión. Condensación: Fusión de dos huecos contiguos.\n                        </p>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-1 atras\">\n                <button class=\"bi bi-caret-right btn btn-info btn btn-block btatras\" (click)=\"OnNext()\"></button>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <button class=\"btn btn-block btn-dark\" (click)=\"OnInicio()\">Inicio</button>\n    </div>\n</div>"],"sourceRoot":"webpack:///"}